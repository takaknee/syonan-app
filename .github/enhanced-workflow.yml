# GitHub Actions Enhanced Workflow with Firewall Configuration
# Addresses firewall blocking issues for Flutter/Dart development

name: Enhanced Development Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

env:
  FLUTTER_VERSION: '3.x'
  DART_VERSION: 'stable'

jobs:
  setup-environment:
    name: Setup Development Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Pre-setup steps to avoid firewall issues
      - name: Configure firewall exceptions
        run: |
          echo "Configuring firewall exceptions for development tools..."

          # Add Google services to allowed domains
          echo "dl-ssl.google.com" >> /tmp/allowed-domains.txt
          echo "storage.googleapis.com" >> /tmp/allowed-domains.txt

          # Add Ubuntu services
          echo "api.snapcraft.io" >> /tmp/allowed-domains.txt
          echo "esm.ubuntu.com" >> /tmp/allowed-domains.txt

          echo "Firewall configuration prepared"

      - name: Setup Flutter with caching
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}
        continue-on-error: true
        timeout-minutes: 10

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: setup-environment
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter (cached)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}
        continue-on-error: true
        timeout-minutes: 10

      - name: Get dependencies
        run: |
          if [ -f pubspec.yaml ]; then
            flutter pub get
          else
            echo "pubspec.yaml not found. Flutter project not initialized."
          fi
        continue-on-error: false
        timeout-minutes: 5

      - name: Analyze code
        run: |
          if [ -f pubspec.yaml ]; then
            flutter analyze
          else
            echo "Skipping Dart analysis."
          fi
        continue-on-error: false
        timeout-minutes: 10

      - name: Check formatting
        run: |
          if [ -f pubspec.yaml ]; then
            dart format --set-exit-if-changed .
          else
            echo "Skipping format check."
          fi
        continue-on-error: false
        timeout-minutes: 5

  test-execution:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup-environment
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter (cached)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}
        continue-on-error: true
        timeout-minutes: 10

      - name: Get dependencies
        run: flutter pub get
        continue-on-error: false
        timeout-minutes: 5

      - name: Run tests
        run: |
          if [ -d test ]; then
            flutter test
          else
            echo "No tests found. Skipping test execution."
          fi
        continue-on-error: false
        timeout-minutes: 15

  copilot-suggestions:
    name: Copilot Development Suggestions
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.dart
            **/*.yaml
            **/*.md

      - name: Copilot development guidelines check
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo ""
          echo "ü§ñ GitHub Copilot Development Suggestions:"
          echo ""
          echo "1. Review code according to .github/instructions/"
          echo "2. Use effective prompt templates from .github/prompts/"
          echo "3. Verify child-safe app security and privacy requirements"
          echo "4. Check accessibility requirements are met"
          echo "5. Evaluate performance impact"
          echo ""
          echo "üìù Recommended Actions:"
          echo "- Request code review with GitHub Copilot Chat"
          echo "- Verify security best practices"
          echo "- Improve test coverage"
          echo "- Update documentation"
