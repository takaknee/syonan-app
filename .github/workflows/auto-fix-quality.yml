name: コード品質自動修正

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      target_branch:
        description: '修正対象ブランチ'
        required: false
        default: 'main'

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  auto-fix-quality:
    name: コード品質自動修正
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📦 リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🚀 Flutter環境のセットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          cache: true
        continue-on-error: true
        timeout-minutes: 3

      - name: 🔍 Flutter利用可能性の確認
        id: flutter_check
        run: |
          if command -v flutter >/dev/null 2>&1; then
            echo "flutter_available=true" >> $GITHUB_OUTPUT
            echo "✅ Flutter が利用可能です"
            flutter --version
          else
            echo "flutter_available=false" >> $GITHUB_OUTPUT
            echo "❌ Flutter が利用できません - Flutter固有の修正をスキップします"
          fi

      - name: 📦 依存関係の取得
        if: steps.flutter_check.outputs.flutter_available == 'true'
        run: |
          if [ -f pubspec.yaml ]; then
            echo "📦 Flutter依存関係を取得中..."
            flutter pub get
          fi
        continue-on-error: true
        timeout-minutes: 3

      - name: 🎨 コードフォーマットの自動修正
        if: steps.flutter_check.outputs.flutter_available == 'true'
        id: format_fix
        run: |
          echo "🔧 コードフォーマットの自動修正中（120文字制限）..."
          
          # フォーマットが必要かチェック
          if ! dart format --line-length=120 --set-exit-if-changed . --dry-run; then
            echo "format_needed=true" >> $GITHUB_OUTPUT
            echo "⚠️ フォーマット問題を検出しました。修正を適用中..."
            
            # フォーマットを適用
            dart format --line-length=120 .
            
            # ファイルが変更されたかチェック
            if git diff --exit-code; then
              echo "✅ フォーマット後に変更はありません"
              echo "changes_made=false" >> $GITHUB_OUTPUT
            else
              echo "📝 ファイルがフォーマットされました"
              echo "changes_made=true" >> $GITHUB_OUTPUT
              
              # 変更されたファイルを表示
              echo "変更されたファイル:"
              git diff --name-only
            fi
          else
            echo "format_needed=false" >> $GITHUB_OUTPUT
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "✅ コードは既に適切にフォーマットされています"
          fi

      - name: 🎯 精密自動修正の実行
        if: steps.flutter_check.outputs.flutter_available == 'true'
        id: precise_fix
        run: |
          echo "🎯 精密自動修正システムを実行中..."
          
          # 実行権限を付与
          chmod +x scripts/precise-auto-fix.sh
          
          # 精密自動修正を実行
          ./scripts/precise-auto-fix.sh
          
          # 変更があったかチェック
          if git diff --exit-code; then
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 自動修正による変更はありませんでした"
          else
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "📝 自動修正による変更が見つかりました"
            
            # 変更されたファイルを表示
            echo "変更されたファイル:"
            git diff --name-only
            
            echo "変更の詳細:"
            git diff --stat
          fi
      - name: 📊 変更の統合確認
        if: steps.flutter_check.outputs.flutter_available == 'true'
        id: combined_changes
        run: |
          if git diff --exit-code; then
            echo "any_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 全体で変更はありませんでした"
          else
            echo "any_changes=true" >> $GITHUB_OUTPUT
            echo "📝 変更が見つかりました"
            echo "変更されたファイル数: $(git diff --name-only | wc -l)"
            echo "変更の詳細:"
            git diff --stat
          fi

      - name: Commit auto-fixes
        if: |
          steps.flutter_check.outputs.flutter_available == 'true' && 
          steps.combined_changes.outputs.any_changes == 'true'
        run: |
          echo "💾 自動修正をコミット中..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Auto-fix"
          
          git add -A
          
          # 精密自動修正による変更をコミット
          git commit -m "chore: Auto-fix code quality issues [auto-fix] - Applied automated fixes via precise-auto-fix.sh"
          
          echo "✅ 自動修正をコミットしました"

      - name: 📤 変更のプッシュ
        if: |
          steps.flutter_check.outputs.flutter_available == 'true' && 
          steps.combined_changes.outputs.any_changes == 'true'
        run: |
          echo "📤 自動修正をプッシュ中..."
          
          # 現在のブランチ名を取得
          CURRENT_BRANCH="${{ github.head_ref || github.ref_name }}"
          echo "対象ブランチ: $CURRENT_BRANCH"
          
          # リモートの設定を確認
          git remote -v
          
          # プッシュを実行（force-with-leaseで安全にプッシュ）
          git push --force-with-lease origin "HEAD:$CURRENT_BRANCH" || {
            echo "⚠️ プッシュに失敗しました。競合が発生した可能性があります。"
            echo "🔄 リモートの最新状態を取得してリトライします..."
            git fetch origin "$CURRENT_BRANCH"
            git rebase "origin/$CURRENT_BRANCH" || {
              echo "❌ リベースに失敗しました。手動での解決が必要です。"
              exit 1
            }
            git push origin "HEAD:$CURRENT_BRANCH"
          }
          
          echo "✅ 自動修正のプッシュが完了しました"

      - name: 📝 PR結果コメントの投稿
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const flutterAvailable = '${{ steps.flutter_check.outputs.flutter_available }}';
            const formatNeeded = '${{ steps.format_fix.outputs.format_needed }}';
            const changesMade = '${{ steps.format_fix.outputs.changes_made }}';
            const analysisIssues = '${{ steps.analysis_fix.outputs.analysis_issues }}';
            const fixesApplied = '${{ steps.analysis_fix.outputs.fixes_applied }}';
            
            let comment = '## 🤖 コード品質自動修正の結果\n\n';
            
            if (flutterAvailable === 'false') {
              comment += '⚠️ Flutter環境が利用できません - 品質チェックをスキップしました\n';
            } else {
              comment += '### 📝 コードフォーマット\n';
              if (formatNeeded === 'true') {
                if (changesMade === 'true') {
                  comment += '✅ **修正完了**: コードフォーマットの問題が自動修正されました\n';
                } else {
                  comment += '✅ **正常**: フォーマットは既に正しい状態でした\n';
                }
              } else {
                comment += '✅ **正常**: フォーマットの問題は検出されませんでした\n';
              }
              
              comment += '\n### 🔍 コード解析\n';
              if (analysisIssues === 'true') {
                if (fixesApplied === 'true') {
                  comment += '✅ **一部修正完了**: いくつかの解析問題が自動修正されました\n';
                  comment += '⚠️ 残りの問題については手動での確認が必要です\n';
                } else {
                  comment += '⚠️ **手動修正が必要**: 手動対応が必要な解析問題が検出されました\n';
                }
              } else {
                comment += '✅ **正常**: 解析問題は検出されませんでした\n';
              }
              
              if (changesMade === 'true' || fixesApplied === 'true') {
                comment += '\n---\n';
                comment += '✨ **自動修正が適用され、このPRにコミットされました**\n';
                comment += '変更内容を確認し、要件を満たしているかご確認ください。\n';
              }
            }
            
            comment += '\n---\n';
            comment += '*このコメントはコード品質自動修正ワークフローによって自動生成されました。*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fallback quality check (without Flutter)
        if: steps.flutter_check.outputs.flutter_available == 'false'
        run: |
          echo "🔍 Running basic quality checks without Flutter..."
          
          # Basic file structure checks
          echo "📂 Checking project structure..."
          if [ -f pubspec.yaml ]; then
            echo "✅ pubspec.yaml found"
          else
            echo "❌ pubspec.yaml not found"
          fi
          
          if [ -d lib ]; then
            echo "✅ lib directory found"
            echo "Dart files in lib: $(find lib -name "*.dart" | wc -l)"
          else
            echo "❌ lib directory not found"
          fi
          
          if [ -d test ]; then
            echo "✅ test directory found"
            echo "Test files: $(find test -name "*_test.dart" | wc -l)"
          else
            echo "⚠️ test directory not found"
          fi
          
          # Basic syntax checks using basic tools
          echo "📝 Basic syntax validation..."
          find lib test -name "*.dart" 2>/dev/null | head -10 | while read file; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic syntax check - just ensure file is readable
              cat "$file" > /dev/null && echo "  ✅ Readable" || echo "  ❌ Issue with file"
            fi
          done
          
          echo "✅ Basic quality checks completed"
