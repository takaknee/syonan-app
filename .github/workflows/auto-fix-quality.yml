name: コード品質自動修正

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      target_branch:
        description: '修正対象ブランチ'
        required: false
        default: 'main'

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  auto-fix-quality:
    name: コード品質自動修正
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📦 リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🚀 Flutter環境のセットアップ
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          cache: true
        continue-on-error: true
        timeout-minutes: 3

      - name: 🔍 Flutter利用可能性の確認
        id: flutter_check
        run: |
          if command -v flutter >/dev/null 2>&1; then
            echo "flutter_available=true" >> $GITHUB_OUTPUT
            echo "✅ Flutter が利用可能です"
            flutter --version
          else
            echo "flutter_available=false" >> $GITHUB_OUTPUT
            echo "❌ Flutter が利用できません - Flutter固有の修正をスキップします"
          fi

      - name: 📦 依存関係の取得
        if: steps.flutter_check.outputs.flutter_available == 'true'
        run: |
          if [ -f pubspec.yaml ]; then
            echo "📦 Flutter依存関係を取得中..."
            flutter pub get
          fi
        continue-on-error: true
        timeout-minutes: 3

      - name: 🎨 コードフォーマットの自動修正
        if: steps.flutter_check.outputs.flutter_available == 'true'
        id: format_fix
        run: |
          echo "🔧 コードフォーマットの自動修正中（120文字制限）..."
          
          # フォーマットが必要かチェック
          if ! dart format --line-length=120 --set-exit-if-changed . --dry-run; then
            echo "format_needed=true" >> $GITHUB_OUTPUT
            echo "⚠️ フォーマット問題を検出しました。修正を適用中..."
            
            # フォーマットを適用
            dart format --line-length=120 .
            
            # ファイルが変更されたかチェック
            if git diff --exit-code; then
              echo "✅ フォーマット後に変更はありません"
              echo "changes_made=false" >> $GITHUB_OUTPUT
            else
              echo "📝 ファイルがフォーマットされました"
              echo "changes_made=true" >> $GITHUB_OUTPUT
              
              # 変更されたファイルを表示
              echo "変更されたファイル:"
              git diff --name-only
            fi
          else
            echo "format_needed=false" >> $GITHUB_OUTPUT
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "✅ コードは既に適切にフォーマットされています"
          fi

      - name: Auto-fix analysis issues with precise targeting
        if: steps.flutter_check.outputs.flutter_available == 'true'
        id: analysis_fix
        run: |
          echo "🔍 Running analysis and attempting precise auto-fixes..."
          
          # Run analysis and capture output
          if flutter analyze --no-preamble > analysis_output.txt 2>&1; then
            echo "✅ No analysis issues found"
            echo "analysis_issues=false" >> $GITHUB_OUTPUT
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
          else
            echo "analysis_issues=true" >> $GITHUB_OUTPUT
            echo "⚠️ Analysis issues detected:"
            cat analysis_output.txt
            
            fixes_applied=false
            
            # Parse analysis output and fix specific issues
            echo "🎯 Applying precise fixes based on analysis results..."
            
            # Fix prefer_const_constructors issues
            if grep -q "prefer_const_constructors" analysis_output.txt; then
              echo "🔧 Fixing const constructor issues..."
              
              # Extract file:line information and fix each specific case
              grep "prefer_const_constructors" analysis_output.txt | while IFS= read -r line; do
                # Extract file and line number: file.dart:123:45
                if [[ $line =~ ([^[:space:]]+\.dart):([0-9]+):([0-9]+) ]]; then
                  file="${BASH_REMATCH[1]}"
                  line_num="${BASH_REMATCH[2]}"
                  
                  if [ -f "$file" ]; then
                    echo "  → Fixing const in $file at line $line_num"
                    
                    # Read the specific line and apply const fix
                    current_line=$(sed -n "${line_num}p" "$file")
                    
                    # Smart const addition patterns
                    if [[ $current_line =~ ^([[:space:]]*)([^[:space:]].*)$ ]]; then
                      indent="${BASH_REMATCH[1]}"
                      content="${BASH_REMATCH[2]}"
                      
                      # Common patterns to add const
                      if [[ $content =~ ^(Icon|Text|SizedBox|Padding|Container|MaterialApp|Scaffold)\( ]]; then
                        new_line="${indent}const ${content}"
                        sed -i "${line_num}s/.*/$new_line/" "$file"
                        fixes_applied=true
                        echo "    ✓ Added const to: $content"
                      elif [[ $content =~ ^([a-zA-Z_][a-zA-Z0-9_]*\() ]]; then
                        # General constructor pattern
                        new_line="${indent}const ${content}"
                        sed -i "${line_num}s/.*/$new_line/" "$file"
                        fixes_applied=true
                        echo "    ✓ Added const to constructor at line $line_num"
                      fi
                    fi
                  fi
                fi
              done
            fi
            
            # Fix Flutter API compatibility issues
            echo "🔧 Checking for Flutter API compatibility issues..."
            if grep -q "argument_type_not_assignable" analysis_output.txt; then
              echo "Attempting to fix Flutter API compatibility issues..."
              
              # Fix CardTheme -> CardThemeData (Flutter 3.32+ compatibility)
              if grep -q "CardTheme.*can't be assigned.*CardThemeData" analysis_output.txt; then
                echo "Fixing CardTheme -> CardThemeData compatibility..."
                find lib -name "*.dart" -exec sed -i 's/cardTheme: const CardTheme(/cardTheme: const CardThemeData(/g' {} \; || true
                find lib -name "*.dart" -exec sed -i 's/cardTheme: CardTheme(/cardTheme: CardThemeData(/g' {} \; || true
                fixes_applied=true
              fi
            fi
            
            # Check if any fixes were applied
            if git diff --exit-code; then
              echo "fixes_applied=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No automatic fixes could be applied"
            else
              echo "fixes_applied=true" >> $GITHUB_OUTPUT
              echo "✅ Some automatic fixes were applied"
              echo "Fixed files:"
              git diff --name-only
            fi
          fi

      - name: Commit auto-fixes
        if: |
          steps.flutter_check.outputs.flutter_available == 'true' && 
          (steps.format_fix.outputs.changes_made == 'true' || steps.analysis_fix.outputs.fixes_applied == 'true')
        run: |
          echo "💾 Committing auto-fixes..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A
          
          commit_message="🤖 Auto-fix: Code quality improvements"
          
          if [ "${{ steps.format_fix.outputs.changes_made }}" = "true" ]; then
            commit_message="$commit_message - Format code"
          fi
          
          if [ "${{ steps.analysis_fix.outputs.fixes_applied }}" = "true" ]; then
            commit_message="$commit_message - Fix analysis issues"
          fi
          
          git commit -m "$commit_message" || echo "No changes to commit"

      - name: 📤 変更のプッシュ
        if: |
          steps.flutter_check.outputs.flutter_available == 'true' && 
          (steps.format_fix.outputs.changes_made == 'true' || steps.analysis_fix.outputs.fixes_applied == 'true')
        run: |
          echo "📤 自動修正をプッシュ中..."
          git push origin HEAD

      - name: 📝 PR結果コメントの投稿
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const flutterAvailable = '${{ steps.flutter_check.outputs.flutter_available }}';
            const formatNeeded = '${{ steps.format_fix.outputs.format_needed }}';
            const changesMade = '${{ steps.format_fix.outputs.changes_made }}';
            const analysisIssues = '${{ steps.analysis_fix.outputs.analysis_issues }}';
            const fixesApplied = '${{ steps.analysis_fix.outputs.fixes_applied }}';
            
            let comment = '## 🤖 コード品質自動修正の結果\n\n';
            
            if (flutterAvailable === 'false') {
              comment += '⚠️ Flutter環境が利用できません - 品質チェックをスキップしました\n';
            } else {
              comment += '### 📝 コードフォーマット\n';
              if (formatNeeded === 'true') {
                if (changesMade === 'true') {
                  comment += '✅ **修正完了**: コードフォーマットの問題が自動修正されました\n';
                } else {
                  comment += '✅ **正常**: フォーマットは既に正しい状態でした\n';
                }
              } else {
                comment += '✅ **正常**: フォーマットの問題は検出されませんでした\n';
              }
              
              comment += '\n### 🔍 コード解析\n';
              if (analysisIssues === 'true') {
                if (fixesApplied === 'true') {
                  comment += '✅ **一部修正完了**: いくつかの解析問題が自動修正されました\n';
                  comment += '⚠️ 残りの問題については手動での確認が必要です\n';
                } else {
                  comment += '⚠️ **手動修正が必要**: 手動対応が必要な解析問題が検出されました\n';
                }
              } else {
                comment += '✅ **正常**: 解析問題は検出されませんでした\n';
              }
              
              if (changesMade === 'true' || fixesApplied === 'true') {
                comment += '\n---\n';
                comment += '✨ **自動修正が適用され、このPRにコミットされました**\n';
                comment += '変更内容を確認し、要件を満たしているかご確認ください。\n';
              }
            }
            
            comment += '\n---\n';
            comment += '*このコメントはコード品質自動修正ワークフローによって自動生成されました。*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fallback quality check (without Flutter)
        if: steps.flutter_check.outputs.flutter_available == 'false'
        run: |
          echo "🔍 Running basic quality checks without Flutter..."
          
          # Basic file structure checks
          echo "📂 Checking project structure..."
          if [ -f pubspec.yaml ]; then
            echo "✅ pubspec.yaml found"
          else
            echo "❌ pubspec.yaml not found"
          fi
          
          if [ -d lib ]; then
            echo "✅ lib directory found"
            echo "Dart files in lib: $(find lib -name "*.dart" | wc -l)"
          else
            echo "❌ lib directory not found"
          fi
          
          if [ -d test ]; then
            echo "✅ test directory found"
            echo "Test files: $(find test -name "*_test.dart" | wc -l)"
          else
            echo "⚠️ test directory not found"
          fi
          
          # Basic syntax checks using basic tools
          echo "📝 Basic syntax validation..."
          find lib test -name "*.dart" 2>/dev/null | head -10 | while read file; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic syntax check - just ensure file is readable
              cat "$file" > /dev/null && echo "  ✅ Readable" || echo "  ❌ Issue with file"
            fi
          done
          
          echo "✅ Basic quality checks completed"
